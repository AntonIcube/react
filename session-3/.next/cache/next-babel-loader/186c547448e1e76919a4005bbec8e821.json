{"ast":null,"code":"var _jsxFileName = \"D:\\\\belajarReactjs\\\\react\\\\session-3\\\\pages\\\\category\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport Layout from \"../../components/layout\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { withApollo } from \"../../lib/apollo\";\nimport Link from \"next/link\";\nimport { Typography, Grid, Button, Paper, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst CATEGORY_LIST = gql`\n  query Category($id: String!) {\n    categoryList(filters: { url_key: { eq: $id } }) {\n      id\n      name\n      description\n      products {\n        items {\n          id\n          name\n          url_key\n          image {\n            url\n          }\n          price_range {\n            maximum_price {\n              final_price {\n                value\n                currency\n              }\n            }\n            minimum_price {\n              final_price {\n                value\n                currency\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst useStyles = makeStyles(theme => ({\n  pagetitle: {\n    marginTop: 20\n  },\n  categorydesc: {\n    fontSize: 14\n  },\n  categorytitle: {\n    marginBottom: 40,\n    paddingBottom: 50,\n    textAlign: \"center\"\n  },\n  container: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(12, 1fr)\",\n    gridGap: theme.spacing(3)\n  },\n  paper: {\n    padding: theme.spacing(3),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    whiteSpace: \"nowrap\",\n    marginBottom: theme.spacing(5)\n  },\n  productimage: {\n    width: \"100%\"\n  },\n  productTitle: {\n    fontSize: \"18px\",\n    color: \"#000\"\n  },\n  price: {\n    fontWeight: \"bold\",\n    fontSize: \"16px\",\n    color: \"#000\"\n  }\n}));\n\nfunction CategoryId() {\n  const classes = useStyles();\n  const router = useRouter();\n  const id = router.query.id;\n  const response = useQuery(CATEGORY_LIST, {\n    variables: {\n      id: id\n    }\n  });\n  const {\n    loading,\n    error,\n    data\n  } = response;\n\n  if (loading) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 12\n      }\n    }, \"Error...\");\n  }\n\n  const category = data.categoryList;\n  const products = data.categoryList[0].products.items;\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classes.categorytitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, category[0].name), __jsx(\"div\", {\n    className: classes.categorydesc,\n    dangerouslySetInnerHTML: {\n      __html: category[0].description\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, products.map((val, key) => {\n    return __jsx(Grid, {\n      key: key,\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, __jsx(\"img\", {\n      className: classes.productimage,\n      src: val.image.url,\n      alt: val.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    }), __jsx(\"p\", {\n      className: classes.productTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }\n    }, val.name), __jsx(\"p\", {\n      className: classes.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }, `${val.price_range.minimum_price.final_price.currency} ${val.price_range.minimum_price.final_price.value.toFixed(2)}`), __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 19\n      }\n    }, __jsx(Link, {\n      href: \"/product/[id]\",\n      as: `/product/${val.url_key}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 23\n      }\n    }, \"Detail\")))));\n  }), \";\")));\n}\n\nexport default withApollo({\n  ssr: true\n})(CategoryId);","map":{"version":3,"sources":["D:/belajarReactjs/react/session-3/pages/category/[id].js"],"names":["useRouter","Layout","useQuery","gql","withApollo","Link","Typography","Grid","Button","Paper","CircularProgress","makeStyles","CATEGORY_LIST","useStyles","theme","pagetitle","marginTop","categorydesc","fontSize","categorytitle","marginBottom","paddingBottom","textAlign","container","display","gridTemplateColumns","gridGap","spacing","paper","padding","color","palette","text","secondary","whiteSpace","productimage","width","productTitle","price","fontWeight","CategoryId","classes","router","id","query","response","variables","loading","error","data","category","categoryList","products","items","name","__html","description","map","val","key","image","url","price_range","minimum_price","final_price","currency","value","toFixed","url_key","ssr"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport Layout from \"../../components/layout\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { withApollo } from \"../../lib/apollo\";\r\nimport Link from \"next/link\";\r\nimport { Typography, Grid, Button, Paper, CircularProgress } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CATEGORY_LIST = gql`\r\n  query Category($id: String!) {\r\n    categoryList(filters: { url_key: { eq: $id } }) {\r\n      id\r\n      name\r\n      description\r\n      products {\r\n        items {\r\n          id\r\n          name\r\n          url_key\r\n          image {\r\n            url\r\n          }\r\n          price_range {\r\n            maximum_price {\r\n              final_price {\r\n                value\r\n                currency\r\n              }\r\n            }\r\n            minimum_price {\r\n              final_price {\r\n                value\r\n                currency\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pagetitle: {\r\n    marginTop: 20,\r\n  },\r\n  categorydesc: {\r\n    fontSize: 14,\r\n  },\r\n  categorytitle: {\r\n    marginBottom: 40,\r\n    paddingBottom: 50,\r\n    textAlign: \"center\",\r\n  },\r\n  container: {\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(12, 1fr)\",\r\n    gridGap: theme.spacing(3),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    whiteSpace: \"nowrap\",\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n  productimage: {\r\n    width: \"100%\",\r\n  },\r\n  productTitle: {\r\n    fontSize: \"18px\",\r\n    color: \"#000\",\r\n  },\r\n  price: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n}));\r\n\r\nfunction CategoryId() {\r\n  const classes = useStyles();\r\n  const router = useRouter();\r\n  const id = router.query.id;\r\n  const response = useQuery(CATEGORY_LIST, {\r\n    variables: { id: id },\r\n  });\r\n\r\n  const { loading, error, data } = response;\r\n  if (loading) {\r\n    return <Layout>Loading...</Layout>;\r\n  }\r\n  if (error) {\r\n    return <Layout>Error...</Layout>;\r\n  }\r\n\r\n  const category = data.categoryList;\r\n  const products = data.categoryList[0].products.items;\r\n  return (\r\n    <Layout>\r\n      <div className={classes.categorytitle}>\r\n        <h1>\r\n          {category[0].name}\r\n        </h1>\r\n        <div\r\n          className={classes.categorydesc}\r\n          dangerouslySetInnerHTML={{ __html: category[0].description }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Grid container spacing={3}>\r\n          {products.map((val, key) => {\r\n            return (\r\n              <Grid key={key} item xs={3}>\r\n                <Paper className={classes.paper}>\r\n                  <img\r\n                    className={classes.productimage}\r\n                    src={val.image.url}\r\n                    alt={val.name}\r\n                  />\r\n                  <p className={classes.productTitle}>{val.name}</p>\r\n                  <p className={classes.price}>\r\n                    {`${\r\n                      val.price_range.minimum_price.final_price.currency\r\n                    } ${val.price_range.minimum_price.final_price.value.toFixed(\r\n                      2\r\n                    )}`}\r\n                  </p>\r\n                  <Button >\r\n                    <Link href=\"/product/[id]\" as={`/product/${val.url_key}`}>\r\n                      <a>\r\n                        Detail\r\n                      </a>\r\n                    </Link>\r\n                  </Button>\r\n                </Paper>\r\n              </Grid>\r\n            );\r\n          })}\r\n          ;\r\n        </Grid>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default withApollo({ ssr: true })(CategoryId);\r\n"]},"metadata":{},"sourceType":"module"}