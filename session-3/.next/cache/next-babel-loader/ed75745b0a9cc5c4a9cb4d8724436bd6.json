{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from \"@apollo/client\";\nimport { resolvers, typeDefs, fields } from \"../../apollo/resolver\";\nexport var cache = new InMemoryCache(fields);\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: new HttpLink({\n      uri: \"https://swiftpwa-be.testingnow.me/graphql\",\n      // Server URL (must be absolute)\n      credentials: \"same-origin\" // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: cache.restore(initialState),\n    typeDefs: typeDefs\n  });\n}","map":{"version":3,"sources":["D:/belajarReactjs/react/session-3/lib/apollo/client.js"],"names":["ApolloClient","InMemoryCache","HttpLink","resolvers","typeDefs","fields","cache","createApolloClient","initialState","ctx","ssrMode","Boolean","link","uri","credentials","restore"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,gBAAtD;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,uBAA5C;AACA,OAAO,IAAMC,KAAK,GAAG,IAAIL,aAAJ,CAAkBI,MAAlB,CAAd;AAGP,eAAe,SAASE,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;AAC5D;AACA;AACA,SAAO,IAAIT,YAAJ,CAAiB;AACtBU,IAAAA,OAAO,EAAEC,OAAO,CAACF,GAAD,CADM;AAEtBG,IAAAA,IAAI,EAAE,IAAIV,QAAJ,CAAa;AACjBW,MAAAA,GAAG,EAAE,2CADY;AACiC;AAClDC,MAAAA,WAAW,EAAE,aAFI,CAEW;;AAFX,KAAb,CAFgB;AAMtBR,IAAAA,KAAK,EAAEA,KAAK,CAACS,OAAN,CAAcP,YAAd,CANe;AAOtBJ,IAAAA,QAAQ,EAARA;AAPsB,GAAjB,CAAP;AASD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from \"@apollo/client\";\r\nimport { resolvers, typeDefs, fields } from \"../../apollo/resolver\";\r\nexport const cache = new InMemoryCache(fields);\r\n\r\n\r\nexport default function createApolloClient(initialState, ctx) {\r\n  // The `ctx` (NextPageContext) will only be present on the server.\r\n  // use it to extract auth headers (ctx.req) or similar.\r\n  return new ApolloClient({\r\n    ssrMode: Boolean(ctx),\r\n    link: new HttpLink({\r\n      uri: \"https://swiftpwa-be.testingnow.me/graphql\", // Server URL (must be absolute)\r\n      credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\r\n    }),\r\n    cache: cache.restore(initialState),\r\n    typeDefs,\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}